<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>