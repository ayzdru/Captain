// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using FileContextCore.Diagnostics;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Logging;

namespace FileContextCore.Internal
{
    /// <summary>
    ///		This API supports the Entity Framework Core infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    static class FileContextStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Properties.FileContextStrings", typeof(FileContextStrings).GetTypeInfo().Assembly);

        /// <summary>
        ///     Saved {count} entities to in-memory store.
        /// </summary>
        public static readonly EventDefinition<int> LogSavedChanges
            = new EventDefinition<int>(
                FileContextEventId.ChangesSaved,
                LogLevel.Information,
                LoggerMessage.Define<int>(
                    LogLevel.Information,
                    FileContextEventId.ChangesSaved,
                    _resourceManager.GetString("LogSavedChanges")));

        /// <summary>
        ///     Transactions are not supported by the in-memory store. See http://go.microsoft.com/fwlink/?LinkId=800142
        /// </summary>
        public static readonly EventDefinition LogTransactionsNotSupported
            = new EventDefinition(
                FileContextEventId.TransactionIgnoredWarning,
                LogLevel.Warning,
                LoggerMessage.Define(
                    LogLevel.Warning,
                    FileContextEventId.TransactionIgnoredWarning,
                    _resourceManager.GetString("LogTransactionsNotSupported")));

        /// <summary>
        ///     Attempted to update or delete an entity that does not exist in the store.
        /// </summary>
        public static string UpdateConcurrencyException
            => GetString("UpdateConcurrencyException");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
